{
  "hash": "b865b66da35ded46fca29ee70f5ab872",
  "result": {
    "markdown": "---\ntitle: \"Análise de Sobrevivência\"\nsubtitle: \"Modelos não Paramétricos\"\nauthor: \"Prof. Ricardo Accioly\"\nformat:\n  revealjs:\n    slide-number: true\n    css: styles.css\n    theme: dark\n    footer: \"IME05-12532 - Análise de Sobrevivência\"\n---\n\n\n## Análise de Sobrevivência (1)\n\nNesta apresentação vamos ver passo a passo como obter uma estimativa da curva de sobrevivência através do método de Kaplan-Meier.\n\nVamos inicialmente utilizar o pacote `survival` que é a principal referência em modelos de análise de sobrevivência.\n\n## Análise de Sobrevivência (2)\n\nVamos usar neste exemplo dados de pacientes com leucemia.\n\nO objetivo é verificar se o tratamento proposto, 6MP, tem efeito sobre a doença.\n\nExistem dois grupos de pacientes:\n\n-   21 receberam 6MP que é um medicamento para tratar leucemia\n-   Os outros 21 receberam placebo.\n\n::: {.fragment .highlight-red}\nO evento falha aqui é ocorrer uma recaída na doença.\n:::\n\n## Função taxa de falhas e quantis\n\nVamos obter uma aproximação da função taxa de falhas usando a função density\n\nPosteriormente vamos obter o quantil usando uma função do pacote `survey`\n\n## h(t) não paramétrica - 6MP {.smaller}\n\n::: panel-tabset\n### Codigo\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(survival)\nlibrary(readxl)\ndados <- read_xlsx(\"anderson.xlsx\", col_names = TRUE)\najusteKM <- survfit(Surv(tempo, status) ~ 1, subset = (Rx==0), data=dados)\najusteKM_sum <- summary(ajusteKM)\npesos <- ajusteKM_sum$n.event/ajusteKM_sum$n.risk\nh <- density(ajusteKM_sum$time, kernel = \"gaussian\", n = 100, from = 0, to = 35, weights = pesos)\nlibrary(ggplot2)\ndata <- data.frame(x=h$x, y=h$y)\n```\n:::\n\n\n### Grafico\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data, aes(x=x, y=y)) + geom_line() + scale_y_continuous(limits=c(0,0.20)) + theme_light() +\n  theme(axis.text = element_text(size = 12),\n        axis.title = element_text(size = 14)) +\n  labs(x = \"Tempo [semanas]\", y = \"Estimativa da taxa de falhas\", title = \"Estimativa da taxa de falhas - 6MP\")\n```\n\n::: {.cell-output-display}\n![](Aula02C_files/figure-revealjs/unnamed-chunk-2-1.png){width=768}\n:::\n:::\n\n:::\n\n## h(t) não paramétrica - Placebo {.smaller}\n\n::: panel-tabset\n### Codigo\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntempo2<- c(1,1,2,2,3,4,4,5,5,8,8,8,8,11,11,12,12,15,17,22,23)\nstatus2<- c(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1) \ndados <- data.frame(tempos=tempo2, status=status2)\najusteKM <- survfit(Surv(tempos, status) ~ 1, data=dados)\najusteKM_sum <- summary(ajusteKM)\npesos <- ajusteKM_sum$n.event/ajusteKM_sum$n.risk\nh <- density(ajusteKM_sum$time, weights = pesos,\nkernel = \"gaussian\", n = 100, from = 0, to = 25)\ndata <- data.frame(x=h$x, y=h$y)\n```\n:::\n\n\n### Grafico\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data, aes(x=x, y=y)) + geom_line() + scale_y_continuous(limits=c(0,0.20)) +  theme_light() +\n  theme(axis.text = element_text(size = 12),\n        axis.title = element_text(size = 14)) +\n  labs(x = \"Tempo [semanas]\", y = \"Estimativa da taxa de falhas\", title = \"Estimativa da taxa de falhas - Placebo\")\n```\n\n::: {.cell-output-display}\n![](Aula02C_files/figure-revealjs/unnamed-chunk-4-1.png){width=768}\n:::\n:::\n\n:::\n\n\n## Quantis não paramétricos\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(survey)\ndados_p <- svydesign(ids = ~1, data=dados)\ndados_svykm <- svykm(Surv(tempos, status) ~ 1, dados_p, se=TRUE)\nquantile(dados_svykm, 0.5, ci=TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n0.5 \n  8 \nattr(,\"ci\")\n    0.025 0.975\n0.5     5    12\n```\n:::\n:::\n",
    "supporting": [
      "Aula02C_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\r\n<script>\r\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\r\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\r\n  // slide changes (different for each slide format).\r\n  (function () {\r\n    // dispatch for htmlwidgets\r\n    function fireSlideEnter() {\r\n      const event = window.document.createEvent(\"Event\");\r\n      event.initEvent(\"slideenter\", true, true);\r\n      window.document.dispatchEvent(event);\r\n    }\r\n\r\n    function fireSlideChanged(previousSlide, currentSlide) {\r\n      fireSlideEnter();\r\n\r\n      // dispatch for shiny\r\n      if (window.jQuery) {\r\n        if (previousSlide) {\r\n          window.jQuery(previousSlide).trigger(\"hidden\");\r\n        }\r\n        if (currentSlide) {\r\n          window.jQuery(currentSlide).trigger(\"shown\");\r\n        }\r\n      }\r\n    }\r\n\r\n    // hookup for slidy\r\n    if (window.w3c_slidy) {\r\n      window.w3c_slidy.add_observer(function (slide_num) {\r\n        // slide_num starts at position 1\r\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\r\n      });\r\n    }\r\n\r\n  })();\r\n</script>\r\n\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}