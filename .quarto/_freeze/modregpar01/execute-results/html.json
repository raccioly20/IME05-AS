{
  "hash": "6cb0cf9777c12b6f6b296f1770cd1edc",
  "result": {
    "markdown": "---\ntitle: \"Análise de Sobrevivência\"\nsubtitle: \"Modelos de regressão paramétricos\"\nauthor: \"Ricardo Accioly\"\nformat: html\n---\n\n\n### Introdução\n\nNesta etapa vamos começar a trabalhar com modelos de regressão paramétricos.\n\nOs modelos que vamos ver se denominam modelos de tempo de falha (vida) acelerado TFA (AFT).\n\nO conjunto de dados a seguir chamado \"anderson.xlsx\" consiste em tempos de remissão em 42 pacientes com leucemia, metade dos quais recebem uma certa nova terapia de tratamento e a outra metade recebe uma terapia de tratamento padrão. A variável de exposição de interesse é o tratamento (Rx = 0 se novo tratamento, Rx = 1 se tratamento padrão).\n\nDuas outras variáveis para controle como potenciais confundidores são a contagem de glóbulos brancos (ou seja, logwbc) e sexo. O status de falha é definido pela variável recaída (0 se censurado, 1 se falhar).\n\n### Carregando os dados\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(survival)\nlibrary(readxl)\ndados <- read_xlsx(\"anderson.xlsx\", col_names = TRUE )\nsummary(dados)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     tempo           status            sexo            logwbc     \n Min.   : 1.00   Min.   :0.0000   Min.   :0.0000   Min.   :1.450  \n 1st Qu.: 6.00   1st Qu.:0.0000   1st Qu.:0.0000   1st Qu.:2.303  \n Median :10.50   Median :1.0000   Median :0.0000   Median :2.800  \n Mean   :12.88   Mean   :0.7143   Mean   :0.4762   Mean   :2.930  \n 3rd Qu.:18.50   3rd Qu.:1.0000   3rd Qu.:1.0000   3rd Qu.:3.490  \n Max.   :35.00   Max.   :1.0000   Max.   :1.0000   Max.   :5.000  \n       Rx     \n Min.   :0.0  \n 1st Qu.:0.0  \n Median :0.5  \n Mean   :0.5  \n 3rd Qu.:1.0  \n Max.   :1.0  \n```\n:::\n:::\n\n\n### Ajuste Não Paramétrico\n\n\n::: {.cell}\n\n```{.r .cell-code}\nekm <- survfit(Surv(tempo,status)~Rx, data=dados)\ntempo <- ekm$time\nst <- ekm$surv\nsummary(ekm)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCall: survfit(formula = Surv(tempo, status) ~ Rx, data = dados)\n\n                Rx=0 \n time n.risk n.event survival std.err lower 95% CI upper 95% CI\n    6     21       3    0.857  0.0764        0.720        1.000\n    7     17       1    0.807  0.0869        0.653        0.996\n   10     15       1    0.753  0.0963        0.586        0.968\n   13     12       1    0.690  0.1068        0.510        0.935\n   16     11       1    0.627  0.1141        0.439        0.896\n   22      7       1    0.538  0.1282        0.337        0.858\n   23      6       1    0.448  0.1346        0.249        0.807\n\n                Rx=1 \n time n.risk n.event survival std.err lower 95% CI upper 95% CI\n    1     21       2   0.9048  0.0641      0.78754        1.000\n    2     19       2   0.8095  0.0857      0.65785        0.996\n    3     17       1   0.7619  0.0929      0.59988        0.968\n    4     16       2   0.6667  0.1029      0.49268        0.902\n    5     14       2   0.5714  0.1080      0.39455        0.828\n    8     12       4   0.3810  0.1060      0.22085        0.657\n   11      8       2   0.2857  0.0986      0.14529        0.562\n   12      6       2   0.1905  0.0857      0.07887        0.460\n   15      4       1   0.1429  0.0764      0.05011        0.407\n   17      3       1   0.0952  0.0641      0.02549        0.356\n   22      2       1   0.0476  0.0465      0.00703        0.322\n   23      1       1   0.0000     NaN           NA           NA\n```\n:::\n\n```{.r .cell-code}\nplot(ekm, xlab=\"Tempo (meses)\",ylab=\"S(t) estimada\")\n```\n\n::: {.cell-output-display}\n![](modregpar01_files/figure-html/ex_2-1.png){width=672}\n:::\n:::\n\n\n## Modelo Exponencial\n\n\n::: {.cell}\n\n```{.r .cell-code}\nleuc.exp.comp <- survreg(Surv(tempo, status) ~ sexo + logwbc + Rx, data = dados, dist = \"exponential\")\nsummary(leuc.exp.comp)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nsurvreg(formula = Surv(tempo, status) ~ sexo + logwbc + Rx, data = dados, \n    dist = \"exponential\")\n              Value Std. Error     z      p\n(Intercept)  5.9741     0.6965  8.58 <2e-16\nsexo        -0.0859     0.3834 -0.22  0.823\nlogwbc      -0.8723     0.2212 -3.94  8e-05\nRx          -1.1156     0.4270 -2.61  0.009\n\nScale fixed at 1 \n\nExponential distribution\nLoglik(model)= -100.7   Loglik(intercept only)= -116.8\n\tChisq= 32.04 on 3 degrees of freedom, p= 5.1e-07 \nNumber of Newton-Raphson Iterations: 4 \nn= 42 \n```\n:::\n:::\n\n\n## Automatizando ajuste\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(MASS)\nleuc.exp.sel <- stepAIC(leuc.exp.comp, ditection=\"backward\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nStart:  AIC=209.5\nSurv(tempo, status) ~ sexo + logwbc + Rx\n\n         Df    AIC\n- sexo    1 207.55\n<none>      209.50\n- Rx      1 215.10\n- logwbc  1 222.57\n\nStep:  AIC=207.55\nSurv(tempo, status) ~ logwbc + Rx\n\n         Df    AIC\n<none>      207.55\n- Rx      1 213.22\n- logwbc  1 221.05\n```\n:::\n\n```{.r .cell-code}\nsummary(leuc.exp.sel)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nsurvreg(formula = Surv(tempo, status) ~ logwbc + Rx, data = dados, \n    dist = \"exponential\")\n             Value Std. Error     z       p\n(Intercept)  5.958      0.699  8.52 < 2e-16\nlogwbc      -0.884      0.216 -4.10 4.2e-05\nRx          -1.093      0.413 -2.65  0.0082\n\nScale fixed at 1 \n\nExponential distribution\nLoglik(model)= -100.8   Loglik(intercept only)= -116.8\n\tChisq= 31.99 on 2 degrees of freedom, p= 1.1e-07 \nNumber of Newton-Raphson Iterations: 4 \nn= 42 \n```\n:::\n:::\n\n\n## Fazendo Previsões\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnovosdados <- data.frame(logwbc=c(2,2), Rx=c(0,1))\npredict(leuc.exp.sel, type=\"lp\", newdata=novosdados)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       1        2 \n4.189084 3.096010 \n```\n:::\n:::\n\n\n## Tempo Mediano\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprev1 <-predict(leuc.exp.sel, type=\"quantile\", newdata=novosdados, p=0.5)\nprev1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       1        2 \n45.72161 15.32518 \n```\n:::\n\n```{.r .cell-code}\nprev1[1]/prev1[2]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       1 \n2.983431 \n```\n:::\n:::\n\n\n## Comparando com outro quantil\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprev2 <-predict(leuc.exp.sel, type=\"quantile\", newdata=novosdados, p=0.7)\nprev2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       1        2 \n79.41687 26.61931 \n```\n:::\n\n```{.r .cell-code}\nprev2[1]/prev2[2]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       1 \n2.983431 \n```\n:::\n:::\n\n\n## Verificando o modelo\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(car)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nCarregando pacotes exigidos: carData\n```\n:::\n\n```{.r .cell-code}\npar(mfrow = c(1, 2), cex = 0.6)\npred.lin <- predict(leuc.exp.sel, type = \"lp\")[dados$status == 1]\nlog.resid <- log(dados$tempo[dados$status == 1]) - pred.lin\nplot(pred.lin, log.resid, main = \"Grafico TA\",\nxlab = \"log(valores ajustados)\", ylab = \"log(residuos)\")\nqqPlot(log.resid, dist = \"norm\", sd=leuc.exp.sel$scale, \nmain = \"Grafico Q-Q\", xlab = \"Quantis teoricos Exponencial\", ylab = \"Quantis empiricos\")\n```\n\n::: {.cell-output-display}\n![](modregpar01_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 29  7\n```\n:::\n:::\n\n\n## Modelo Weibull\n\n\n::: {.cell}\n\n```{.r .cell-code}\nleuc.wei.comp <- survreg(Surv(tempo, status) ~ sexo + logwbc + Rx, data = dados, dist = \"weibull\")\nsummary(leuc.wei.comp)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nsurvreg(formula = Surv(tempo, status) ~ sexo + logwbc + Rx, data = dados, \n    dist = \"weibull\")\n             Value Std. Error     z       p\n(Intercept)  5.462      0.351 15.58 < 2e-16\nsexo        -0.156      0.179 -0.87 0.38350\nlogwbc      -0.792      0.105 -7.54 4.8e-14\nRx          -0.722      0.201 -3.59 0.00034\nLog(scale)  -0.815      0.144 -5.65 1.6e-08\n\nScale= 0.443 \n\nWeibull distribution\nLoglik(model)= -89.7   Loglik(intercept only)= -116.4\n\tChisq= 53.42 on 3 degrees of freedom, p= 1.5e-11 \nNumber of Newton-Raphson Iterations: 7 \nn= 42 \n```\n:::\n:::\n\n\n## Análise de resíduos\n\n\n::: {.cell}\n\n```{.r .cell-code}\n##=====================================================================\nqq.reg.resid.r<-function(data,time,status,fit,quantile,xlab){\n##=================================\n## Purpose: For parametric regression models, this constructs a\n##          qq-plot of ordered residuals e_i=(y_i-yhat_i)/sigmahat against\n##          the log-parametric standard quantiles z_i of either the\n##          \"weibull\", \"lognormal\", or \"loglogistic\" distribution.\n##--------------------------------------------------------------------------\n## NOTE:  This can also be used for fitting a single sample of survival\n##        times to a parametric model. Since there are no covariates\n##        remember to type survReg(Surv(...,...)~1,dist=\"...\",data=...) \n##        in order to estimate the intercept mu.\n##---------------------------------------------------------------------------\n## Arguments:   data = data.frame\n##              time = survival time variable name in data.frame\n##              status = name of status variable in data.frame\n##              fit = a survreg object\n##              quantile = \"qweibull\" or \"qnorm\" or \"qlogis\"  \n##              xlab = \"type your label\" E.g., \"standard extreme value quantiles\"\n##------------------------------------------------------------------------------\n## Author: Mara Tableman, Revises: 6 March, 2013\n##==============================================================================\ntemp<-data\ntemp$time<-time\ntemp$status<-status\ntemp$ei<-(log(temp$time)-predict(fit,type=\"lp\"))/fit$scale\ntemp<-temp[order(temp$ei), ]\ncon<-abs(min(temp$ei))+.00001\ntemp$ei<-temp$ei+con \nkm.fit<-survfit(Surv(ei,status)~1,data=temp)\n##temp$km.surv<-summary(km.fit,censor=T)$surv\ntemp$km.surv<-summary(km.fit, time=temp$ei, extend=T)$surv\nif (quantile == \"qweibull\") {\nzi<-as.numeric(qweibull(1-temp$km.surv,1,1))\nk<-nrow(temp)\nfor (i in 1:k){\n\tif (zi[i]!=-Inf && zi[i]!=Inf ) zi[i]<-log(zi[i])\n}\ntemp$zi<-zi\nfor(i in 1:k){ if (temp$zi[i]==-Inf)\n{\tsurv.max.1<-max(temp$km.surv[temp$status==1])\n\td<-1-surv.max.1\n\tsurv.pu<-1-d/2\t\n\ttemp$zi[i]<-log(qweibull(1-surv.pu,1,1))}\n}\nfor (i in 1:k){ if (temp$zi[i]==Inf)\n{  d<-min(temp$km.surv[temp$km.surv > 0])\n\tsurv.pl<-d/2\n\ttemp$zi[i]<-log(qweibull(1-surv.pl,1,1))}\n}\n}\nif (quantile == \"qlogis\") {\nzi<-as.numeric(qlogis(1-temp$km.surv,0,1))\nk<-nrow(temp)\nfor (i in 1:k){\n\tif (zi[i]!=-Inf && zi[i]!=Inf ) zi[i]<-zi[i]\n}\ntemp$zi<-zi\nfor(i in 1:k){ if (temp$zi[i]==-Inf)\n{\tsurv.max.1<-max(temp$km.surv[temp$status==1])\n\td<-1-surv.max.1\n\tsurv.pu<-1-d/2\t\n\ttemp$zi[i]<-qlogis(1-surv.pu,0,1)}\n}\nfor (i in 1:k){ if (temp$zi[i]==Inf)\n{  d<-min(temp$km.surv[temp$km.surv > 0])\n\tsurv.pl<-d/2\n\ttemp$zi[i]<-qlogis(1-surv.pl,0,1)}\n}\n}\n if (quantile == \"qnorm\"){ \nzi<-as.numeric(qnorm(1-temp$km.surv,0,1))\nk<-nrow(temp)\nfor (i in 1:k){\n\tif (zi[i]!=-Inf && zi[i]!=Inf ) zi[i]<-zi[i]\n}\ntemp$zi<-zi\nfor(i in 1:k){ if (temp$zi[i]==-Inf)\n{\tsurv.max.1<-max(temp$km.surv[temp$status==1])\n\td<-1-surv.max.1\n\tsurv.pu<-1-d/2\t\n\ttemp$zi[i]<-qnorm(1-surv.pu,0,1)}\n}\nfor (i in 1:k){ if (temp$zi[i]==Inf)\n{  d<-min(temp$km.surv[temp$km.surv > 0])\n\tsurv.pl<-d/2\n\ttemp$zi[i]<-qnorm(1-surv.pl,0,1)}\n}\n}\n temp$ei<-temp$ei-con\n##print(temp)\nplot(temp$zi,temp$ei,xlab=xlab,ylab=\"ordered ei residuals\",type=\"n\",xlim=c(min(temp$zi),max(temp$zi)),ylim=c(min(temp$ei),max(temp$ei)+.15))\npoints(temp$zi[temp$status==0],temp$ei[temp$status==0],pch=\".\",cex=3)\npoints(temp$zi[temp$status==1],temp$ei[temp$status==1],pch=\"o\",cex=1)\nlines(temp$zi[temp$status==1],temp$ei[temp$status==1],lty=1,lwd=1)\nk<-nrow(temp)\nfor(i in 1:k)\n{ if (temp$status[i]==0)\narrows(temp$zi[i],temp$ei[i],temp$zi[i],temp$ei[i]+.15,code=2,length=.12,lwd=2.01)}\nabline(a=0,b=1,lty=4,lwd=2)\nusr<-par(\"usr\")\narrows(.9*usr[1]+.1*usr[2],.07*usr[3]+.93*usr[4],.9*usr[1]+.1*usr[2],.07*usr[3]+.93*usr[4]+.15,code=2,length=.12,lwd=2.01)\ntext(.8*usr[1]+.2*usr[2],.05*usr[3]+.95*usr[4],\"= censored\")\npoints(.9*usr[1]+.1*usr[2],.11*usr[3]+.89*usr[4],pch=\"o\")\ntext(.79*usr[1]+.21*usr[2],.1*usr[3]+.90*usr[4], \"= uncensored\") \non.exit()\n\"qq.reg.resid:done\"\n}\n\n\nqq.reg.resid.r(dados,dados$tempo,dados$status, leuc.wei.comp,\"qweibull\",\"standard extreme value quantiles\")\n```\n\n::: {.cell-output-display}\n![](modregpar01_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"qq.reg.resid:done\"\n```\n:::\n\n```{.r .cell-code}\n##Example 2: \n##fit.weib<-survreg(Surv(weeks,status)~1,dist=\"weibull\",data=aml1)\n##qq.reg.resid.r(aml1,aml1$weeks,aml1$status,fit.weib,\"qweibull\",\"standard extreme value quantiles\")\n##==================================================\n```\n:::\n",
    "supporting": [
      "modregpar01_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}