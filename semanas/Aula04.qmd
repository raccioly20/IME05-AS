---
title: "Análise de Sobrevivência"
subtitle: "Modelos Paramétricos"
author: "Ricardo Accioly"
format:
  revealjs:
    theme: league 
    slide-number: true
    chalkboard: 
      buttons: false
    preview-links: auto
    css: styles.css
---

```{r setup}
#| echo: true
#| fig-width: 10
#| fig-height: 4.5
```


## Modelos Paramétricos

Neste exemplo são considerados os tempos de reincidência, em meses, de um grupo de 20 pacientes com cancer de bexiga que foram submetidos a um procedimento cirurgico feito por laser.

Vamos ver passo a passo como ajustar os modelos exponencial, Weibull e lognormal.

Aqui vamos utilizar as funções existentes no pacote `survival`.

Para ajustar um modelo paramétrico usamo a função `survreg`.


## Metodo de Kaplan-Meier

```{r}
#| echo: true
#| fig-width: 10
#| fig-height: 4.5
library(survival)
tempos<-c(3,5,6,7,8,9,10,10,12,15,15,18,19,20,22,25,28,30,40,45)
cens<-c(1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,0)
dados <- data.frame(tempos=tempos, status=cens)
ekm <- survfit(Surv(tempos,status)~1, data=dados)
summary(ekm)
```

## Curva de Sobrevivência não paramétrica

```{r}
#| echo: true
#| fig-width: 10
#| fig-height: 4.5
plot(ekm, xlab="Tempo (meses)",ylab="S(t) estimada")
```

## Taxa de Falhas não paramétrica

```{r}
ajusteKM <- survfit(Surv(tempos, status) ~ 1, data=dados)
ajusteKM_sum <- summary(ajusteKM)
pesos <- ajusteKM_sum$n.event/ajusteKM_sum$n.risk
h <- density(ajusteKM_sum$time, weights = pesos, 
             kernel = "gaussian", n = 100, from = 0, to = 45)
plot(h$x, h$y, type = "l", xlab = "Tempo (meses)", ylab = "Taxa de Falhas")

```


## Quantis não parametricos


```{r}
library(survey)
dados_p <- svydesign(ids = ~1, data=dados)
dados_svykm <- svykm(Surv(tempos, status) ~ 1, dados_p, se=TRUE)
mediana.km <- quantile(dados_svykm, 0.5, ci=TRUE)
med.km <- c(mediana.km[1], attr(mediana.km, "ci")[1], attr(mediana.km, "ci")[2])
names(med.km) <- c("mediana KM","ICI","ICS")
med.km
```


## Modelo Exponencial

```{r}
ajustExp <- survreg(Surv(tempos,status)~1, 
                    data=dados, dist='exponential')
ajustExp
alfa <- exp(ajustExp$coefficients[1])
alfa
```


## Taxa de falhas NP vs Exp

```{r}
ajusteKM <- survfit(Surv(tempos, status) ~ 1, data=dados)
ajusteKM_sum <- summary(ajusteKM)
pesos <- ajusteKM_sum$n.event/ajusteKM_sum$n.risk
h <- density(ajusteKM_sum$time, weights = pesos, 
             kernel = "gaussian", n = 100, from = 0, to = 45)
plot(h$x, h$y, type = "l", xlab = "Tempo (meses)", ylab = "Taxa de Falhas")
expHaz <- function(x, rate) { 
  dexp(x, rate=rate)/
    pexp(x, rate=rate, lower.tail=F)
}
curve(expHaz(x, rate=1/alfa), from=0, to=45,
      ylab="h(t)", xlab="Tempo", 
      col="red", ylim=c(0,1),
      add=TRUE)
```

## Quantis do Modelo Exponencial

```{r}
coef <- ajustExp$coefficients[1] 
var <- ajustExp$var
IC.exp <- c(alfa,exp(coef-1.96*sqrt(var)), 
            exp(coef+1.96*sqrt(var)))
names(IC.exp) <- c("media","ICI","ICS")
IC.exp

est_med <- predict(ajustExp,type="uquantile",p=0.5,se.fit=T)
est_med1 <- est_med$fit[1]
est_med1.ep <- est_med$se.fit[1]
exp(est_med1)
IC.mediana_exp <- c(exp(est_med1),exp(est_med1-1.96*est_med1.ep),
exp(est_med1+1.96*est_med1.ep))
names(IC.mediana_exp) <- c("mediana Exp","ICI","ICS")
IC.mediana_exp
```


## Avaliação do modelo


```{r}
library(car)
n.censurado <- dados$tempos[dados$status == 1]
qqPlot(n.censurado,
dist = "exp",
rate = 1/alfa,
xlab = "Quantis Teoricos (exponencial)",
ylab = "Quantis Empiricos")
```


## Modelo Weibull

```{r}
ajustWei <- survreg(Surv(tempos,status)~1, data=dados, dist='weibull')
ajustWei
alfaw <- exp(ajustWei$coefficients[1])
alfaw
betaw <- 1/ajustWei$scale
betaw
```

## Taxa de Falhas NP vs Weibull

```{r}
ajusteKM <- survfit(Surv(tempos, status) ~ 1, data=dados)
ajusteKM_sum <- summary(ajusteKM)
pesos <- ajusteKM_sum$n.event/ajusteKM_sum$n.risk
h <- density(ajusteKM_sum$time, weights = pesos, 
             kernel = "gaussian", n = 100, from = 0, to = 45)
plot(h$x, h$y, type = "l", xlab = "Tempo (meses)", ylab = "Taxa de Falhas",
     ylim=c(0,0.10))
weibHaz <- function(x, shape, scale) { 
  dweibull(x, shape=shape, scale=scale)/
  pweibull(x, shape=shape, scale=scale,
           lower.tail=F)
}
curve(weibHaz(x, shape=betaw, scale=alfaw), 
      from=0, to=45,
      ylab="h(t)", xlab="Tempo", col="red",
      add=TRUE)

```


## Quantis do Modelo Weibull

```{r}
ajustWei <- survreg(Surv(tempos,status)~1, data=dados, dist='weibull')
estmedw <- predict(ajustWei,type="uquantile",p=0.5,se.fit=T)
estmedw1 <- estmedw$fit[1]
estmedw1.ep <- estmedw$se.fit[1]
exp(estmedw1)
IC.mediana_w <- c(exp(estmedw1),exp(estmedw1-1.96*estmedw1.ep),
exp(estmedw1+1.96*estmedw1.ep))
names(IC.mediana_w) <- c("mediana Wei","ICI","ICS")
IC.mediana_w
```

## Avaliação do Modelo

```{r}
n.censurado <- dados$tempos[dados$status == 1]
qqPlot(n.censurado,
dist = "weibull",
shape = betaw,
scale = alfaw,
xlab = "Quantis Teoricos (Weibull)",
ylab = "Quantis Empiricos")
```


## Modelo Lognormal

```{r}
ajustLog <- survreg(Surv(tempos, status)~1, data=dados, dist='lognorm')
ajustLog
mulog <- ajustLog$icoef[1]
mulog
sigmalog <- ajustLog$scale
sigmalog
```


## Taxa de Falhas NP vs Lognormal

```{r}
ajusteKM <- survfit(Surv(tempos, status) ~ 1, data=dados)
ajusteKM_sum <- summary(ajusteKM)
pesos <- ajusteKM_sum$n.event/ajusteKM_sum$n.risk
h <- density(ajusteKM_sum$time, weights = pesos, 
             kernel = "gaussian", n = 100, from = 0, to = 45)
plot(h$x, h$y, type = "l", xlab = "Tempo (meses)", ylab = "Taxa de Falhas",
     ylim=c(0,0.10))
logHaz <- function(x, meanlog, sdlog) {
  dlnorm(x, meanlog=meanlog, sdlog=sdlog)/
  plnorm(x, meanlog=meanlog, sdlog=sdlog, 
         lower.tail=F)
}
curve(logHaz(x, meanlog=mulog, sdlog=sigmalog), from=0, to=45,
      ylab="h(t)", xlab="Tempo", 
      col="red",
      add=TRUE)
```


## Quantis do Modelo Lognormal

```{r}
ajustLog <- survreg(Surv(tempos, status)~1, data=dados, dist='lognorm')
estmedl <- predict(ajustLog,type="uquantile",p=0.5,se.fit=T)
estmedl1 <- estmedl$fit[1]
estmedl1.ep <- estmedl$se.fit[1]
exp(estmedl1)
IC.mediana_log <- c(exp(estmedl1),exp(estmedl1-1.96*estmedl1.ep),
exp(estmedl1+1.96*estmedl1.ep))
names(IC.mediana_log) <- c("mediana Logn","ICI","ICS")
IC.mediana_log
```

## Avaliação do Modelo

```{r}
n.censurado <- dados$tempos[dados$status == 1]
qqPlot(n.censurado,
dist = "lnorm",
meanlog = mulog,
sdlog = sigmalog,
xlab = "Quantis Teoricos (Lognormal)",
ylab = "Quantis Empiricos")
```


## Modleo Loglogístico

```{r}
ajustLLog <- survreg(Surv(tempos, status)~1, data=dados, dist='loglogistic')
ajustLLog
betall<- ajustLLog$icoef[1]
betall
alfall <- ajustLLog$scale
alfall
mullog <- betall
sigmallog <- alfall
```

## Taxa de Falhas NP vs Lologística

```{r}
ajusteKM <- survfit(Surv(tempos, status) ~ 1, data=dados)
ajusteKM_sum <- summary(ajusteKM)
pesos <- ajusteKM_sum$n.event/ajusteKM_sum$n.risk
h <- density(ajusteKM_sum$time, weights = pesos, 
             kernel = "gaussian", n = 100, from = 0, to = 45)
plot(h$x, h$y, type = "l", xlab = "Tempo (meses)", ylab = "Taxa de Falhas",
     ylim=c(0,0.15))
library(flexsurv)
llogisHaz <- function(x, alfa, beta) {
  haz <- hllogis(x, shape = beta, scale = alfa, log = FALSE)
}
curve(llogisHaz(x, alfa=alfall, beta=betall), from=0, to=45,
      ylab="h(t)", xlab="Tempo", col="red", add=TRUE)
```

## Quantis do Modelo LogLogístico


```{r}
ajustLLog <- survreg(Surv(tempos, status)~1, data=dados, dist='loglogistic')
estmedll <- predict(ajustLLog,type="uquantile",p=0.5,se.fit=T)
estmedll1 <- estmedll$fit[1]
estmedll1.ep <- estmedll$se.fit[1]
exp(estmedll1)
IC.mediana_llog <- c(exp(estmedll1),exp(estmedll1-1.96*estmedll1.ep),
exp(estmedll1+1.96*estmedll1.ep))
names(IC.mediana_llog) <- c("mediana LogL","ICI","ICS")
IC.mediana_llog
```

## Avaliação do Modelo

```{r}
n.censurado <- dados$tempos[dados$status == 1]
qqPlot(n.censurado,
       dist = "llogis",
       shape = betall,
       scale = alfall,
       xlab = "Quantis Teoricos (LogLogistico)",
       ylab = "Quantis Empiricos")
```


## Curvas de Sobrevivência

```{r}
tempo <- ekm$time
st <- ekm$surv
ste <- exp(-tempo/alfa)
stw <- exp(-(tempo/alfaw)^betaw)
stln <- pnorm((-log(tempo) + mulog)/sigmalog)
stll <- plogis((-log(tempo) + mullog)/sigmallog)
cbind(tempo,st,ste,stw,stln, stll)
```

## Quantis

```{r}
med.km
IC.mediana_exp
IC.mediana_w
IC.mediana_log
IC.mediana_llog
```

## Comparação NP vs Paramétrico


```{r}
par(mfrow=c(1,2))
plot(st,ste,pch=16,ylim=range(c(0.0,1)), xlim=range(c(0,1)), xlab = "S(t): Kaplan-Meier", ylab="S(t): exponencial")
lines(c(0,1), c(0,1), type="l", lty=1)
plot(st,stw,pch=16,ylim=range(c(0.0,1)), xlim=range(c(0,1)), xlab = "S(t): Kaplan-Meier",
     ylab="S(t): Weibull")
lines(c(0,1), c(0,1), type="l", lty=1)
```

## Comparação NP vs Paramétrico


```{r}
par(mfrow=c(1,2))
plot(st,stln,pch=16,ylim=range(c(0.0,1)), xlim=range(c(0,1)), xlab = "S(t): Kaplan-Meier",
     ylab="S(t): Log-normal")
lines(c(0,1), c(0,1), type="l", lty=1)
plot(st,stll,pch=16,ylim=range(c(0.0,1)), xlim=range(c(0,1)), xlab = "S(t): Kaplan-Meier",
     ylab="S(t): log-Logistica")
lines(c(0,1), c(0,1), type="l", lty=1)
```


## Comparação NP vs Paramétrico


```{r}
par(mfrow=c(1,2))
plot(ekm, conf.int=F, xlab="Tempos", ylab="S(t)")
lines(c(0,tempo),c(1,ste), lty=2)
legend(25,0.8,lty=c(1,2),c("Kaplan-Meier", "Exponencial"),bty="n",cex=0.8)
plot(ekm, conf.int=F, xlab="Tempos", ylab="S(t)")
lines(c(0,tempo),c(1,stw), lty=2)
legend(25,0.8,lty=c(1,2),c("Kaplan-Meier", "Weibull"),bty="n",cex=0.8)
```


## Comparação NP vs Paramétrico


```{r}
par(mfrow=c(1,2))
plot(ekm, conf.int=F, xlab="Tempos", ylab="S(t)")
lines(c(0,tempo),c(1,stln), lty=2)
legend(25,0.8,lty=c(1,2),c("Kaplan-Meier", "Lognormal"),bty="n",cex=0.8)
plot(ekm, conf.int=F, xlab="Tempos", ylab="S(t)")
lines(c(0,tempo),c(1,stll), lty=2)
legend(25,0.8,lty=c(1,2),c("Kaplan-Meier", "LogLogistica"),bty="n",cex=0.8)
```
