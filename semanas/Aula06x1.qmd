---
title: "Análise de Sobrevivência"
subtitle: "Modelos Paramétricos TFA (AFT)"
author: "Ricardo Accioly"
format:
 html:
    code-link: true
    fig-width: 9
    fig-height: 7
    fig-dpi: 300
knitr:
  opts_chunk: 
    out.width: 90%
    comment: "#>"
---

## Modelos TFA

O conjunto de dados carregados a seguir são de 238 pacientes viciados com heroína.

Os pacientes foram tratados em duas clínicas (1 e 2), além disso foram coletadas informações sobre dose de medicamento ministrado no tratamento e se o paciente já havia sido preso ou não.

Os tempos (`survt`) são em dias e o evento analisado foi o tempo até a saída da clínica (status=1) ou o tempo até o término de estudo (tempo censurado (status=0).

-   id: Identificação do paciente
-   clinic: clinica em que ocorreu o tratamento
-   survt: tempo até a saída da clínica (dias)
-   status: censoring status 0=censored (censurado), 1=evento
-   prison: 0= se nunca foi preso e 1= se já foi preso
-   dose: dose do medicamento ministradp

## Carregando os dados

```{r}
#| echo: fenced
library(survival)
library(readxl)
dados <- read_xlsx("heroina.xlsx", col_names = TRUE )
summary(dados)
```

## Avaliando presença de dados ausentes

```{r}
#| echo: fenced
nrow(dados)
sum(complete.cases(dados))
```

## Modelo Exponencial

```{r}
#| echo: fenced
TFAExp <- survreg(Surv(survt,status)~ clinic + prison + dose,dist='exponential', data=dados)
summary(TFAExp)
```

## Modelo Weibull

```{r}
#| echo: fenced
TFAWei <- survreg(Surv(survt, status) ~ clinic + prison + dose,
                   dist = "weibull", 
                   data=dados)
summary(TFAWei)
```

## Previsão na mediana do tempo entre eventos

Aqui estamos mantendo as variáveis prisão e dose fixas somente variando a clínica

```{r}
#| echo: fenced
novosdados <- data.frame(clinic = c("1", "2"),
                         prison = c(0, 0), dose = c(60, 60))
previs <- predict(TFAWei, type = "quantile", 
                  newdata = novosdados, p = 0.5)
previs
```

## Razão entre as previsões dos dois grupos

```{r}
previs[2]/previs[1]
```

## Previsão em outro Quantil

```{r}
previs <- predict(TFAWei, type = "quantile", 
                  newdata = novosdados, p = 0.7)
previs
```

## Razão entre as previsões dos dois grupos

```{r}
previs[2]/previs[1]
```

## Função auxiliar

Uma função para suavizar os pontos da nuvem de resíduos do modelo

```{r}
smoothSEcurve <- function(yy, xx) {
# usar depois de chamar um grafico
# Ajusta um curva lowess curve com IC de 95%
## Facilita a avaliação dos resíduos
xx.list <- min(xx) + ((0:100)/100)*(max(xx) - min(xx))
yy.xx <- predict(loess(yy ~ xx), se=T,
newdata=data.frame(xx=xx.list))
lines(yy.xx$fit ~ xx.list, lwd=2)
lines(yy.xx$fit -
qt(0.975, yy.xx$df)*yy.xx$se.fit ~ xx.list, lty=2)
lines(yy.xx$fit +
qt(0.975, yy.xx$df)*yy.xx$se.fit ~ xx.list, lty=2)
}
```

## Diagnóstico do Modelo

```{r}
library(car)
par(mfrow = c(1, 2), cex = 0.6)
pred.lin <- predict(TFAWei, type = "lp")[dados$status == 1]
log.resid <- log(dados$survt[dados$status == 1]) - pred.lin
plot(pred.lin, log.resid, main = "Grafico TA",
xlab = "log(valores ajustados)", ylab = "log(residuos)")
smoothSEcurve(log.resid, pred.lin)
qqPlot(exp(log.resid), dist = "weibull",
shape = 1/TFAWei$scale,
main = "Grafico Q-Q", xlab = "Quantis teoricos Weibull", ylab = "Quantis empiricos")
```

## Modelo Lognormal

```{r}
#| echo: fenced
TFALn <- survreg(Surv(survt, status) ~ clinic + prison + dose,
                   dist = "lognormal", 
                   data=dados)
summary(TFALn)
```

## Previsões na mediana

```{r}
#| echo: fenced
previs <- predict(TFALn, type = "quantile", 
                  newdata = novosdados, p = 0.5)
previs
```

## Razão das previsões na mediana

```{r}
previs[2]/previs[1]

```

## Outro Quantil

```{r}
previs <- predict(TFALn, type = "quantile", 
                  newdata = novosdados, p = 0.7)
previs
```

## Razão das previsões noutro quantil

```{r}
previs[2]/previs[1]
```

## Diagnóstico do Modelo

```{r}
#| echo: fenced
par(mfrow = c(1, 2), cex = 0.6)
pred.lin <- predict(TFALn, type = "lp")[dados$status == 1]
log.resid <- log(dados$survt[dados$status == 1]) - pred.lin
plot(pred.lin, log.resid, main = "Grafico TA",
xlab = "log(valores ajustados)", ylab = "log(residuos)")
smoothSEcurve(log.resid, pred.lin)
qqPlot(log.resid, dist = "norm", sd=TFALn$scale, 
main = "Grafico Q-Q", xlab = "Quantis teoricos Lognormal", ylab = "Quantis empiricos")
```

## Modelo Loglogistico

```{r}
#| echo: fenced
TFALl <- survreg(Surv(survt, status) ~ clinic + prison + dose,
                   dist = "loglogistic", 
                   data=dados)
summary(TFALl)
```

## Previsões na mediana

```{r}
#| echo: fenced
previs <- predict(TFALl, type = "quantile", 
                  newdata = novosdados, p = 0.5)
previs
```

## Razão das previsões na mediana

```{r}
previs[2]/previs[1]
```

## Outro quantil

```{r}
previs <- predict(TFALl, type = "quantile", 
                  newdata = novosdados, p = 0.7)
previs
```

## Razão das previsões

```{r}
previs[2]/previs[1]
```

## Diagnóstico do Modelo

```{r}
#| echo: fenced
par(mfrow = c(1, 2), cex = 0.6)
pred.lin <- predict(TFALl, type = "lp")[dados$status == 1]
log.resid <- log(dados$survt[dados$status == 1]) - pred.lin
plot(pred.lin, log.resid, main = "Grafico TA",
xlab = "log(valores ajustados)", ylab = "log(residuos)")
smoothSEcurve(log.resid, pred.lin)
qqPlot(log.resid, dist = "logis", 
main = "Grafico Q-Q", xlab = "Quantis teoricos Logistica", ylab = "Quantis empiricos")
```
